import tkinter as tk
from tkinter import messagebox

class CalculatorGUI:
    def __init__(self, master):
        self.master = master
        master.title("Basic Calculator")
        master.geometry("300x400") # Set initial window size
        master.resizable(False, False) # Make window not resizable
        master.configure(bg="#F0F0F0") # Light gray background

        self.expression = ""
        self.input_text = tk.StringVar()

        # Display screen for the calculator
        self.input_frame = tk.Frame(master, bd=0, relief="flat", bg="#EEEEEE")
        self.input_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.input_field = tk.Entry(
            self.input_frame,
            font=('arial', 18, 'bold'),
            textvariable=self.input_text,
            width=50,
            bg="#FFFFFF",
            bd=0,
            justify=tk.RIGHT,
            state='readonly', # Make it read-only for direct user input
            readonlybackground="#FFFFFF"
        )
        self.input_field.grid(row=0, column=0, ipadx=8, ipady=8, sticky="nsew")
        self.input_frame.grid_columnconfigure(0, weight=1)


        # Buttons Frame
        self.btns_frame = tk.Frame(master, bg="#F0F0F0")
        self.btns_frame.pack(fill="both", expand=True, padx=10, pady=5)

        # Define button layout
        button_specs = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('0', 4, 0), ('.', 4, 1), ('%', 4, 2), ('+', 4, 3)
        ]

        # Create number and operator buttons
        for (text, row, col) in button_specs:
            button = tk.Button(
                self.btns_frame,
                text=text,
                fg="black",
                width=5,
                height=2,
                bd=0,
                bg="#E0E0E0", # Light gray for regular buttons
                font=('arial', 12, 'bold'),
                command=lambda t=text: self.button_press(t)
            )
            button.grid(row=row, column=col, sticky="nsew", padx=5, pady=5)
            self.btns_frame.grid_columnconfigure(col, weight=1)
            self.btns_frame.grid_rowconfigure(row, weight=1)

        # Clear button
        clear_button = tk.Button(
            self.btns_frame,
            text="C",
            fg="white",
            width=5,
            height=2,
            bd=0,
            bg="#FF6B6B", # Red for clear
            font=('arial', 12, 'bold'),
            command=self.clear_expression
        )
        clear_button.grid(row=0, column=0, columnspan=2, sticky="nsew", padx=5, pady=5)
        self.btns_frame.grid_columnconfigure(0, weight=1) # Ensure column 0 and 1 take space
        self.btns_frame.grid_columnconfigure(1, weight=1)


        # Equals button
        equals_button = tk.Button(
            self.btns_frame,
            text="=",
            fg="white",
            width=5,
            height=2,
            bd=0,
            bg="#4CAF50", # Green for equals
            font=('arial', 12, 'bold'),
            command=self.calculate_result
        )
        equals_button.grid(row=0, column=2, columnspan=2, sticky="nsew", padx=5, pady=5)
        self.btns_frame.grid_columnconfigure(2, weight=1) # Ensure column 2 and 3 take space
        self.btns_frame.grid_columnconfigure(3, weight=1)


    def button_press(self, char):
        self.expression += str(char)
        self.input_text.set(self.expression)

    def clear_expression(self):
        self.expression = ""
        self.input_text.set("")

    def calculate_result(self):
        try:
            # Evaluate the expression
            # Using eval() can be risky with untrusted input,
            # but for a simple calculator, it's generally acceptable.
            # For more complex scenarios, a custom parser is safer.
            result = str(eval(self.expression))
            self.input_text.set(result)
            self.expression = result # Set the result as the new starting point
        except ZeroDivisionError:
            messagebox.showerror("Error", "Cannot divide or modulo by zero!")
            self.expression = "" # Clear expression on error
            self.input_text.set("")
        except SyntaxError:
            messagebox.showerror("Error", "Invalid expression.")
            self.expression = ""
            self.input_text.set("")
        except Exception as e:
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")
            self.expression = ""
            self.input_text.set("")

if __name__ == "__main__":
    root = tk.Tk()
    app = CalculatorGUI(root)
    root.mainloop()
